//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Entropa.WcfUtils.Test.MockServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MockObject", Namespace="http://schemas.datacontract.org/2004/07/Entropa.WcfUtils.MockService")]
    [System.SerializableAttribute()]
    public partial class MockObject : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string A {
            get {
                return this.AField;
            }
            set {
                if ((object.ReferenceEquals(this.AField, value) != true)) {
                    this.AField = value;
                    this.RaisePropertyChanged("A");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string B {
            get {
                return this.BField;
            }
            set {
                if ((object.ReferenceEquals(this.BField, value) != true)) {
                    this.BField = value;
                    this.RaisePropertyChanged("B");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MockServiceReference.IMockContract")]
    public interface IMockContract {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMockContractBase/AddInt", ReplyAction="http://tempuri.org/IMockContractBase/AddIntResponse")]
        int AddInt(int a, int b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMockContractBase/AddInt", ReplyAction="http://tempuri.org/IMockContractBase/AddIntResponse")]
        System.Threading.Tasks.Task<int> AddIntAsync(int a, int b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMockContractBase/AddDouble", ReplyAction="http://tempuri.org/IMockContractBase/AddDoubleResponse")]
        double AddDouble(double a, double b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMockContractBase/AddDouble", ReplyAction="http://tempuri.org/IMockContractBase/AddDoubleResponse")]
        System.Threading.Tasks.Task<double> AddDoubleAsync(double a, double b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMockContractBase/Subtract", ReplyAction="http://tempuri.org/IMockContractBase/SubtractResponse")]
        int Subtract(int a, int b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMockContractBase/Subtract", ReplyAction="http://tempuri.org/IMockContractBase/SubtractResponse")]
        System.Threading.Tasks.Task<int> SubtractAsync(int a, int b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMockContract/Add3", ReplyAction="http://tempuri.org/IMockContract/Add3Response")]
        int Add3(int a, int b, int c);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMockContract/Add3", ReplyAction="http://tempuri.org/IMockContract/Add3Response")]
        System.Threading.Tasks.Task<int> Add3Async(int a, int b, int c);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMockContract/Add4", ReplyAction="http://tempuri.org/IMockContract/Add4Response")]
        int Add4(int a, int b, int c, int d);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMockContract/Add4", ReplyAction="http://tempuri.org/IMockContract/Add4Response")]
        System.Threading.Tasks.Task<int> Add4Async(int a, int b, int c, int d);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMockContract/Add5", ReplyAction="http://tempuri.org/IMockContract/Add5Response")]
        int Add5(int a, int b, int c, int d, int e);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMockContract/Add5", ReplyAction="http://tempuri.org/IMockContract/Add5Response")]
        System.Threading.Tasks.Task<int> Add5Async(int a, int b, int c, int d, int e);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMockContract/Add6", ReplyAction="http://tempuri.org/IMockContract/Add6Response")]
        int Add6(int a, int b, int c, int d, int e, int f);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMockContract/Add6", ReplyAction="http://tempuri.org/IMockContract/Add6Response")]
        System.Threading.Tasks.Task<int> Add6Async(int a, int b, int c, int d, int e, int f);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMockContract/Add7", ReplyAction="http://tempuri.org/IMockContract/Add7Response")]
        int Add7(int a, int b, int c, int d, int e, int f, int g);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMockContract/Add7", ReplyAction="http://tempuri.org/IMockContract/Add7Response")]
        System.Threading.Tasks.Task<int> Add7Async(int a, int b, int c, int d, int e, int f, int g);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMockContract/Add8", ReplyAction="http://tempuri.org/IMockContract/Add8Response")]
        int Add8(int a, int b, int c, int d, int e, int f, int g, int h);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMockContract/Add8", ReplyAction="http://tempuri.org/IMockContract/Add8Response")]
        System.Threading.Tasks.Task<int> Add8Async(int a, int b, int c, int d, int e, int f, int g, int h);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMockContract/Divide", ReplyAction="http://tempuri.org/IMockContract/DivideResponse")]
        int Divide(int a, int b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMockContract/Divide", ReplyAction="http://tempuri.org/IMockContract/DivideResponse")]
        System.Threading.Tasks.Task<int> DivideAsync(int a, int b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMockContract/GetCollection", ReplyAction="http://tempuri.org/IMockContract/GetCollectionResponse")]
        System.Collections.Generic.List<Entropa.WcfUtils.Test.MockServiceReference.MockObject> GetCollection(int noElements);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMockContract/GetCollection", ReplyAction="http://tempuri.org/IMockContract/GetCollectionResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Entropa.WcfUtils.Test.MockServiceReference.MockObject>> GetCollectionAsync(int noElements);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMockContract/MultipleParameterTypes", ReplyAction="http://tempuri.org/IMockContract/MultipleParameterTypesResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.List<Entropa.WcfUtils.Test.MockServiceReference.MockObject>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Entropa.WcfUtils.Test.MockServiceReference.MockObject))]
        string MultipleParameterTypes(string a, object b, System.DateTime c, System.TimeSpan d, System.Nullable<double> e, System.Nullable<int> f);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMockContract/MultipleParameterTypes", ReplyAction="http://tempuri.org/IMockContract/MultipleParameterTypesResponse")]
        System.Threading.Tasks.Task<string> MultipleParameterTypesAsync(string a, object b, System.DateTime c, System.TimeSpan d, System.Nullable<double> e, System.Nullable<int> f);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMockContract/Multiply", ReplyAction="http://tempuri.org/IMockContract/MultiplyResponse")]
        int Multiply(int a, int b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMockContract/Multiply", ReplyAction="http://tempuri.org/IMockContract/MultiplyResponse")]
        System.Threading.Tasks.Task<int> MultiplyAsync(int a, int b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMockContract/NoParameter", ReplyAction="http://tempuri.org/IMockContract/NoParameterResponse")]
        string NoParameter();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMockContract/NoParameter", ReplyAction="http://tempuri.org/IMockContract/NoParameterResponse")]
        System.Threading.Tasks.Task<string> NoParameterAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMockContract/NoParameterNoReturn", ReplyAction="http://tempuri.org/IMockContract/NoParameterNoReturnResponse")]
        void NoParameterNoReturn();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMockContract/NoParameterNoReturn", ReplyAction="http://tempuri.org/IMockContract/NoParameterNoReturnResponse")]
        System.Threading.Tasks.Task NoParameterNoReturnAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMockContract/NoReturn", ReplyAction="http://tempuri.org/IMockContract/NoReturnResponse")]
        void NoReturn(string a);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMockContract/NoReturn", ReplyAction="http://tempuri.org/IMockContract/NoReturnResponse")]
        System.Threading.Tasks.Task NoReturnAsync(string a);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMockContract/ThrowException", ReplyAction="http://tempuri.org/IMockContract/ThrowExceptionResponse")]
        void ThrowException();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMockContract/ThrowException", ReplyAction="http://tempuri.org/IMockContract/ThrowExceptionResponse")]
        System.Threading.Tasks.Task ThrowExceptionAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMockContractChannel : Entropa.WcfUtils.Test.MockServiceReference.IMockContract, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MockContractClient : System.ServiceModel.ClientBase<Entropa.WcfUtils.Test.MockServiceReference.IMockContract>, Entropa.WcfUtils.Test.MockServiceReference.IMockContract {
        
        public MockContractClient() {
        }
        
        public MockContractClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public MockContractClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MockContractClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MockContractClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int AddInt(int a, int b) {
            return base.Channel.AddInt(a, b);
        }
        
        public System.Threading.Tasks.Task<int> AddIntAsync(int a, int b) {
            return base.Channel.AddIntAsync(a, b);
        }
        
        public double AddDouble(double a, double b) {
            return base.Channel.AddDouble(a, b);
        }
        
        public System.Threading.Tasks.Task<double> AddDoubleAsync(double a, double b) {
            return base.Channel.AddDoubleAsync(a, b);
        }
        
        public int Subtract(int a, int b) {
            return base.Channel.Subtract(a, b);
        }
        
        public System.Threading.Tasks.Task<int> SubtractAsync(int a, int b) {
            return base.Channel.SubtractAsync(a, b);
        }
        
        public int Add3(int a, int b, int c) {
            return base.Channel.Add3(a, b, c);
        }
        
        public System.Threading.Tasks.Task<int> Add3Async(int a, int b, int c) {
            return base.Channel.Add3Async(a, b, c);
        }
        
        public int Add4(int a, int b, int c, int d) {
            return base.Channel.Add4(a, b, c, d);
        }
        
        public System.Threading.Tasks.Task<int> Add4Async(int a, int b, int c, int d) {
            return base.Channel.Add4Async(a, b, c, d);
        }
        
        public int Add5(int a, int b, int c, int d, int e) {
            return base.Channel.Add5(a, b, c, d, e);
        }
        
        public System.Threading.Tasks.Task<int> Add5Async(int a, int b, int c, int d, int e) {
            return base.Channel.Add5Async(a, b, c, d, e);
        }
        
        public int Add6(int a, int b, int c, int d, int e, int f) {
            return base.Channel.Add6(a, b, c, d, e, f);
        }
        
        public System.Threading.Tasks.Task<int> Add6Async(int a, int b, int c, int d, int e, int f) {
            return base.Channel.Add6Async(a, b, c, d, e, f);
        }
        
        public int Add7(int a, int b, int c, int d, int e, int f, int g) {
            return base.Channel.Add7(a, b, c, d, e, f, g);
        }
        
        public System.Threading.Tasks.Task<int> Add7Async(int a, int b, int c, int d, int e, int f, int g) {
            return base.Channel.Add7Async(a, b, c, d, e, f, g);
        }
        
        public int Add8(int a, int b, int c, int d, int e, int f, int g, int h) {
            return base.Channel.Add8(a, b, c, d, e, f, g, h);
        }
        
        public System.Threading.Tasks.Task<int> Add8Async(int a, int b, int c, int d, int e, int f, int g, int h) {
            return base.Channel.Add8Async(a, b, c, d, e, f, g, h);
        }
        
        public int Divide(int a, int b) {
            return base.Channel.Divide(a, b);
        }
        
        public System.Threading.Tasks.Task<int> DivideAsync(int a, int b) {
            return base.Channel.DivideAsync(a, b);
        }
        
        public System.Collections.Generic.List<Entropa.WcfUtils.Test.MockServiceReference.MockObject> GetCollection(int noElements) {
            return base.Channel.GetCollection(noElements);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Entropa.WcfUtils.Test.MockServiceReference.MockObject>> GetCollectionAsync(int noElements) {
            return base.Channel.GetCollectionAsync(noElements);
        }
        
        public string MultipleParameterTypes(string a, object b, System.DateTime c, System.TimeSpan d, System.Nullable<double> e, System.Nullable<int> f) {
            return base.Channel.MultipleParameterTypes(a, b, c, d, e, f);
        }
        
        public System.Threading.Tasks.Task<string> MultipleParameterTypesAsync(string a, object b, System.DateTime c, System.TimeSpan d, System.Nullable<double> e, System.Nullable<int> f) {
            return base.Channel.MultipleParameterTypesAsync(a, b, c, d, e, f);
        }
        
        public int Multiply(int a, int b) {
            return base.Channel.Multiply(a, b);
        }
        
        public System.Threading.Tasks.Task<int> MultiplyAsync(int a, int b) {
            return base.Channel.MultiplyAsync(a, b);
        }
        
        public string NoParameter() {
            return base.Channel.NoParameter();
        }
        
        public System.Threading.Tasks.Task<string> NoParameterAsync() {
            return base.Channel.NoParameterAsync();
        }
        
        public void NoParameterNoReturn() {
            base.Channel.NoParameterNoReturn();
        }
        
        public System.Threading.Tasks.Task NoParameterNoReturnAsync() {
            return base.Channel.NoParameterNoReturnAsync();
        }
        
        public void NoReturn(string a) {
            base.Channel.NoReturn(a);
        }
        
        public System.Threading.Tasks.Task NoReturnAsync(string a) {
            return base.Channel.NoReturnAsync(a);
        }
        
        public void ThrowException() {
            base.Channel.ThrowException();
        }
        
        public System.Threading.Tasks.Task ThrowExceptionAsync() {
            return base.Channel.ThrowExceptionAsync();
        }
    }
}
